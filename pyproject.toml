[build-system]
requires = ["setuptools>=61.0", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "sts-client"
dynamic = ["version"]
description = "Small Python library for communicating with the Subaru Telescope STS board (\"STS radio\")."
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.12"
authors = [
    { name = "Subaru Telescope" }
]
keywords = ["Subaru", "telescope", "STS", "radio", "TCP", "binary-protocol"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "License :: Other/Proprietary License",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Topic :: Communications",
]
dependencies = []

[project.optional-dependencies]
# Developer convenience tools; not required at runtime.
dev = [
    "black>=24.0.0",
    "isort>=5.13.0",
    "pydocstyle>=6.3.0",
    "hatch>=1.9.0",
]

[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]

# Hatch configuration: environments and optional build targets
[tool.hatch.envs.default]
dependencies = []

[project.urls]
Homepage = "https://github.com/Subaru-InstDiv/STSpy"
Repository = "https://github.com/Subaru-InstDiv/STSpy.git"

[tool.hatch.envs.default.scripts]
# Run all tests (note: some tests may attempt live network I/O)
test = "python -m unittest -v"
# Run only offline/unit tests that do not require network access
# These exclude tests that perform live network I/O (e.g., Radio.transmit/receive)
test-offline = [
    "python -m unittest -v tests.test_datum.DatumTest",
    "python -m unittest -v tests.test_radio.RadioTest.test_pack_method_with_invalid_data_type",
    "python -m unittest -v tests.test_radio.RadioTest.test_unpack_method_with_invalid_packet_size",
    "python -m unittest -v tests.test_radio.RadioTest.test_unpack_method_with_invalid_data_type",
]

# If using Hatch to build, these targets help define package contents.
# They are ignored by setuptools but recognized by hatchling if you later switch backends.
[tool.hatch.build.targets.sdist]
include = ["src", "README.md", "pyproject.toml", "tests"]

[tool.hatch.build.targets.wheel]
# Specify top-level package names when using hatchling
packages = ["sts"]

[tool.setuptools_scm]
# Enable automatic versioning from Git tags/commits.
# If Git metadata is unavailable (e.g., in a source archive), use a safe fallback version.
fallback_version = "0.1.0"

[tool.black]
line-length = 100
target-version = ["py312"]

[tool.isort]
profile = "black"
line_length = 110
known_first_party = ["sts"]

[tool.pydocstyle]
convention = "numpy"
